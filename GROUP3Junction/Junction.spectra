import "./patterns/DwyerPatterns.spectra"
import "./Utils.spectra"

spec JunctionModule


// *********************************************
// *** define type of all possible vehicles  ***
// *********************************************

type Vehicle = {NONE, CAR, EMERGENCY};


// ***************************************************************
// *** define for checking if there is any vehicle in junction ***
// ***************************************************************

define anyVehicle := vehiclesNorth[1]!=NONE | vehiclesNorth[2]!=NONE | vehiclesNorth[0]!=NONE | 
vehiclesSouth[1]!=NONE | vehiclesSouth[2]!=NONE | vehiclesSouth[0]!=NONE | vehiclesEast[1]!=NONE |
vehiclesEast[2]!=NONE | vehiclesEast[0]!=NONE | vehiclesWest[1]!=NONE | vehiclesWest[2]!=NONE |
vehiclesWest[0]!=NONE;


// *********************************************************
// *** define for checking if all traffic lights are red ***
// *********************************************************

define allRed := !greenNorthVehicles[0] & !greenNorthVehicles[1] & !greenNorthVehicles[2] & !greenSouthVehicles[0] & 
!greenSouthVehicles[1] & !greenSouthVehicles[2] & !greenEastVehicles[0] & !greenEastVehicles[1] & !greenEastVehicles[2] &
!greenWestVehicles[0] & !greenWestVehicles[1] & !greenWestVehicles[2];


// ***************************************************************
// *** define for checking if all pedestrians lights are green ***
// ***************************************************************

define allGreen := greenNorthPedestrians[0] & greenNorthPedestrians[1] & greenEastPedestrians[0] & 
			greenEastPedestrians[1] & greenSouthPedestrians[0] & greenSouthPedestrians[1] 
			& greenWestPedestrians[0] & greenWestPedestrians[1];


// ********************************************************************************
// *** define for checking if there is any vehicle wishing to cross closed road ***
// ********************************************************************************

define anyVehicleToClosedRoad := vehiclesSouth[1]!=NONE | vehiclesEast[0]!=NONE | vehiclesWest[2]!=NONE;


// ************************************************************************
// *** define for checking if all ways toward closed road get red light ***
// ************************************************************************

define redLightsToClosedRoad := !greenSouthVehicles[1] & !greenEastVehicles[0] & !greenWestVehicles[2];


// *********************************************************************************************************
// *** define for checking if there is any vehicle in junction except those wishing to cross closed road ***
// *********************************************************************************************************

define anyVehicleExceptClosedRoad := vehiclesNorth[1]!=NONE | vehiclesNorth[2]!=NONE |
vehiclesNorth[0]!=NONE | vehiclesSouth[2]!=NONE | vehiclesSouth[0]!=NONE | vehiclesEast[1]!=NONE |
vehiclesEast[2]!=NONE | vehiclesWest[1]!=NONE | vehiclesWest[0]!=NONE;


// ****************************************************************************************
// *** cars arrays env variables, index 0 - right , index 1 - straight , index 2 - left ***
// ****************************************************************************************

env Vehicle[3] vehiclesNorth;
env Vehicle[3] vehiclesSouth;
env Vehicle[3] vehiclesEast;
env Vehicle[3] vehiclesWest;


// ************************************************************
// *** pedestrians arrays env variables                     ***
// *** for south and north: index 0 - west , index 1 - east ***
// *** for east and west: index 0 - north , index 1 - south ***
// ************************************************************

env boolean[2] pedestriansNorthPressed;
env boolean[2] pedestriansSouthPressed;
env boolean[2] pedestriansEastPressed;
env boolean[2] pedestriansWestPressed;


// ***********************************************
// *** special climate heavy fog env variable ***
// ***********************************************

env boolean foggy;


// *********************************************
// *** north road constructions env variable ***
// *********************************************

env boolean roadConstructions;


// ********************************************************************************************
// *** whenever vehicles are coming they have to stay there until they are allowed to cross ***
// ********************************************************************************************

asm always consistentVehicleAssertion(vehiclesNorth[0], greenNorthVehicles[0]);
asm always consistentVehicleAssertion(vehiclesNorth[1], greenNorthVehicles[1]);
asm always consistentVehicleAssertion(vehiclesNorth[2], greenNorthVehicles[2]);
asm always consistentVehicleAssertion(vehiclesSouth[0], greenSouthVehicles[0]);
asm always consistentVehicleAssertion(vehiclesSouth[1], greenSouthVehicles[1]);
asm always consistentVehicleAssertion(vehiclesSouth[2], greenSouthVehicles[2]);
asm always consistentVehicleAssertion(vehiclesEast[0], greenEastVehicles[0]);
asm always consistentVehicleAssertion(vehiclesEast[1], greenEastVehicles[1]);
asm always consistentVehicleAssertion(vehiclesEast[2], greenEastVehicles[2]);
asm always consistentVehicleAssertion(vehiclesWest[0], greenWestVehicles[0]);
asm always consistentVehicleAssertion(vehiclesWest[1], greenWestVehicles[1]);
asm always consistentVehicleAssertion(vehiclesWest[2], greenWestVehicles[2]);


// ***********************************************************************************************
// *** whenever pedestrians are coming they have to stay there until they are allowed to cross ***
// ***********************************************************************************************

asm always consistentPedestrianAssertion(pedestriansNorthPressed[0], greenNorthPedestrians[0]);
asm always consistentPedestrianAssertion(pedestriansNorthPressed[1], greenNorthPedestrians[1]);
asm always consistentPedestrianAssertion(pedestriansSouthPressed[0], greenSouthPedestrians[0]);
asm always consistentPedestrianAssertion(pedestriansSouthPressed[1], greenSouthPedestrians[1]);
asm always consistentPedestrianAssertion(pedestriansEastPressed[0], greenEastPedestrians[0]);
asm always consistentPedestrianAssertion(pedestriansEastPressed[1], greenEastPedestrians[1]);
asm always consistentPedestrianAssertion(pedestriansWestPressed[0], greenWestPedestrians[0]);
asm always consistentPedestrianAssertion(pedestriansWestPressed[1], greenWestPedestrians[1]);


// ******************************************************************************************
// *** whenever emergency vehicles are coming they are allowed to cross so the assumption ***
// *** is that no two emergency vehicles on colliding roads are coming at the same time   ***
// ******************************************************************************************

asm alw EmergencyCrashExclusion(vehiclesNorth[1], vehiclesNorth[2], vehiclesEast[1], vehiclesEast[2], 
							vehiclesSouth[1], vehiclesSouth[2], vehiclesWest[1], vehiclesWest[2]);

		
// *****************************************************************************************
// *** in order to prevent starving pedestrians and cars, there must be infinitely often ***
// *** situations in which there is no emergency vehicle at all or it gets red light     ***
// *****************************************************************************************

asm alwEv noEmergency(vehiclesNorth[0],vehiclesNorth[1],vehiclesNorth[2],vehiclesSouth[0],vehiclesSouth[1],vehiclesSouth[2],
	vehiclesEast[0],vehiclesEast[1],vehiclesEast[2],vehiclesWest[0],vehiclesWest[1],vehiclesWest[2],greenNorthVehicles[0],
	greenNorthVehicles[1],greenNorthVehicles[2],greenSouthVehicles[0],greenSouthVehicles[1],greenSouthVehicles[2],
	greenEastVehicles[0],greenEastVehicles[1],greenEastVehicles[2],greenWestVehicles[0],greenWestVehicles[1],greenWestVehicles[2]);


// **********************************************************************************
// *** in order to prevent the junction being in special situations all the time  ***
// *** the assumption is that there is no fog and road constructions all the time ***
// **********************************************************************************

asm alwEv !foggy & !roadConstructions;


// *******************************************************************************************************
// *** cars traffic lights arrays sys variables, index 0 - right , index 1 - straight , index 2 - left ***
// *******************************************************************************************************

sys boolean[3] greenNorthVehicles;
sys boolean[3] greenSouthVehicles;
sys boolean[3] greenEastVehicles;
sys boolean[3] greenWestVehicles;


// ************************************************************
// *** pedestrians traffic lights arrays sys variables      ***
// *** for south and north: index 0 - west , index 1 - east ***
// *** for east and west: index 0 - north , index 1 - south ***
// ************************************************************

sys boolean[2] greenNorthPedestrians;
sys boolean[2] greenSouthPedestrians;
sys boolean[2] greenEastPedestrians;
sys boolean[2] greenWestPedestrians;

            
// ******************************************************************
// *** in case car is coming, it eventually will get green light ***
// ******************************************************************

gar S_responds_to_P_globally(greenNorthVehicles[1], vehiclesNorth[1]=CAR);
gar S_responds_to_P_globally(greenNorthVehicles[2], vehiclesNorth[2]=CAR);
gar S_responds_to_P_globally(greenNorthVehicles[0], vehiclesNorth[0]=CAR);
gar S_responds_to_P_globally(greenSouthVehicles[1], vehiclesSouth[1]=CAR);
gar S_responds_to_P_globally(greenSouthVehicles[2], vehiclesSouth[2]=CAR);
gar S_responds_to_P_globally(greenSouthVehicles[0], vehiclesSouth[0]=CAR);
gar S_responds_to_P_globally(greenEastVehicles[1], vehiclesEast[1]=CAR);
gar S_responds_to_P_globally(greenEastVehicles[2], vehiclesEast[2]=CAR);
gar S_responds_to_P_globally(greenEastVehicles[0], vehiclesEast[0]=CAR);
gar S_responds_to_P_globally(greenWestVehicles[1], vehiclesWest[1]=CAR);
gar S_responds_to_P_globally(greenWestVehicles[2], vehiclesWest[2]=CAR);
gar S_responds_to_P_globally(greenWestVehicles[0], vehiclesWest[0]=CAR);


// ***************************************************************
// *** in order to give pedestrian that wish to cross the road *** 
// *** green light, track the pedestrians that are waiting     ***
// ***************************************************************

monitor boolean pedestrianNorthWestWaiting {
	ini !pedestrianNorthWestWaiting;
	always next(pedestrianNorthWestWaiting)=((pedestriansNorthPressed[0] | pedestrianNorthWestWaiting) & !greenNorthPedestrians[0]);
}

monitor boolean pedestrianNorthEastWaiting {
	ini !pedestrianNorthEastWaiting;
	always next(pedestrianNorthEastWaiting)=((pedestriansNorthPressed[1] | pedestrianNorthEastWaiting) & !greenNorthPedestrians[1]);
}

monitor boolean pedestrianSouthWestWaiting {
	ini !pedestrianSouthWestWaiting;
	always next(pedestrianSouthWestWaiting)=((pedestriansSouthPressed[0] | pedestrianSouthWestWaiting) & !greenSouthPedestrians[0]);
}

monitor boolean pedestrianSouthEastWaiting {
	ini !pedestrianSouthEastWaiting;
	always next(pedestrianSouthEastWaiting)=((pedestriansSouthPressed[1] | pedestrianSouthEastWaiting) & !greenSouthPedestrians[1]);
}

monitor boolean pedestrianWestNorthWaiting {
	ini !pedestrianWestNorthWaiting;
	always next(pedestrianWestNorthWaiting)=((pedestriansWestPressed[0] | pedestrianWestNorthWaiting) & !greenWestPedestrians[0]);
}

monitor boolean pedestrianWestSouthWaiting {
	ini !pedestrianWestSouthWaiting;
	always next(pedestrianWestSouthWaiting)=((pedestriansWestPressed[1] | pedestrianWestSouthWaiting) & !greenWestPedestrians[1]);
}

monitor boolean pedestrianEastNorthWaiting {
	ini !pedestrianEastNorthWaiting;
	always next(pedestrianEastNorthWaiting)=((pedestriansEastPressed[0] | pedestrianEastNorthWaiting) & !greenEastPedestrians[0]);
}

monitor boolean pedestrianEastSouthWaiting {
	ini !pedestrianEastSouthWaiting;
	always next(pedestrianEastSouthWaiting)=((pedestriansEastPressed[1] | pedestrianEastSouthWaiting) & !greenEastPedestrians[1]);
}


// *******************************************************************
// *** in order to handle heavy fog situation and prevent vehicles ***
// *** from crossing the junction, track if there is still fog	   ***
// *******************************************************************

monitor boolean fogAction {
	ini !fogAction;
	always next(fogAction)=(foggy & (!anyVehicle | fogAction | (closedRoadAction & !anyVehicleExceptClosedRoad))) ;
}


// ***************************************************************************
// *** in order to handle road construction situation and prevent vehicles ***
// *** moving toward closed road, track if there is still closed road      ***
// ***************************************************************************

monitor boolean closedRoadAction {
	ini !closedRoadAction;
	always next(closedRoadAction)=(roadConstructions & (!anyVehicleToClosedRoad | closedRoadAction)); 
}


// *******************************************************************
// *** make sure there are no two colliding roads that get green   *** 
// *** light at the same time, otherwise a car accident can happen ***
// *******************************************************************

gar always TrafficLightsExclusion(greenNorthVehicles[1], greenNorthVehicles[2], greenEastVehicles[1], 
	greenEastVehicles[2], greenSouthVehicles[1], 	greenSouthVehicles[2], greenWestVehicles[1],
	greenWestVehicles[2]);
	
	
// *********************************************************************************
// *** make sure there is no crosswalk light gets green light while the traffic  *** 
// *** lights on this road get green light, otherwise pedestrians can be injured ***
// *********************************************************************************

gar always VehiclesAndPedestriansTrafficLightExclusion(greenNorthPedestrians[0], greenNorthPedestrians[1],
				 greenEastPedestrians[0], greenEastPedestrians[1],greenSouthPedestrians[0], greenSouthPedestrians[1],
				 greenWestPedestrians[0], greenWestPedestrians[1], greenNorthVehicles[0], greenNorthVehicles[1],
				 greenNorthVehicles[2], greenEastVehicles[0], greenEastVehicles[1], greenEastVehicles[2], 
				 greenSouthVehicles[0], greenSouthVehicles[1], greenSouthVehicles[2], greenWestVehicles[0],
				 greenWestVehicles[1], greenWestVehicles[2]);
				 

// **********************************************************************
// *** whenever emergency vehicle is coming, let it cross immediately *** 
// **********************************************************************

gar always quickEmergencyCrossingAssertion(vehiclesNorth[0], greenNorthVehicles[0], fogAction);
gar always quickEmergencyCrossingAssertion(vehiclesNorth[1], greenNorthVehicles[1], fogAction);
gar always quickEmergencyCrossingAssertion(vehiclesNorth[2], greenNorthVehicles[2], fogAction);
gar always quickEmergencyCrossingAssertion(vehiclesEast[1], greenEastVehicles[1], fogAction);
gar always quickEmergencyCrossingAssertion(vehiclesEast[2], greenEastVehicles[2], fogAction);
gar always quickEmergencyCrossingAssertion(vehiclesSouth[0], greenSouthVehicles[0], fogAction);
gar always quickEmergencyCrossingAssertion(vehiclesSouth[2], greenSouthVehicles[2], fogAction);
gar always quickEmergencyCrossingAssertion(vehiclesWest[0], greenWestVehicles[0], fogAction);
gar always quickEmergencyCrossingAssertion(vehiclesWest[1], greenWestVehicles[1], fogAction);
gar always quickEmergencyCrossingAssertionWithClosedRoad(vehiclesEast[0], greenEastVehicles[0], fogAction, closedRoadAction);
gar always quickEmergencyCrossingAssertionWithClosedRoad(vehiclesSouth[1], greenSouthVehicles[1], fogAction, closedRoadAction);
gar always quickEmergencyCrossingAssertionWithClosedRoad(vehiclesWest[2], greenWestVehicles[2], fogAction, closedRoadAction);


// ********************************************************************
// *** whenever a fog action is taking place - close all junction	***
// *** for vehicles and open for pedestrians until fog passes		*** 
// ********************************************************************

gar always fogAction -> allRed & allGreen;


// ********************************************************************************
// *** whenever closed road action is taking place, close all ways to this road *** 
// ********************************************************************************

gar always closedRoadAction -> redLightsToClosedRoad;


// *******************************************************************************
// *** by assuring there is infinitely often no waiting pedestrian, we prevent ***
// *** situation in which pedestrian is starved and never allowed to cross     *** 
// *******************************************************************************

gar alwEv !pedestrianNorthWestWaiting;
gar alwEv !pedestrianNorthEastWaiting;
gar alwEv !pedestrianSouthWestWaiting;
gar alwEv !pedestrianSouthEastWaiting;
gar alwEv !pedestrianWestNorthWaiting;
gar alwEv !pedestrianWestSouthWaiting;
gar alwEv !pedestrianEastNorthWaiting;
gar alwEv !pedestrianEastSouthWaiting;