spec Cinderella

define N := 5;
define C := 2;
define B := 9;
define A := 5;

env Int(0..A)[N] unitsToFill;

sys Int(0..B)[N] buckets;
sys Int(0..(N - 1)) firstToEmpty;

predicate inAdjacentBucketsToEmpty(Int(0..(N-1)) i):
	(i >= firstToEmpty & i < firstToEmpty + C) | i < firstToEmpty + C - N;

asm alw unitsToFill.sum = A;
// Translates to : asm alw unitsToFill[0] + unitsToFill[1] + unitsToFill[2] + unitsToFill[3] + unitsToFill[4] = A;

gar forall i in Int(0..(N - 1)). buckets[i] = 0;

gar G forall i in Int(0..(N - 1)). 
 	inAdjacentBucketsToEmpty(i)
     -> (next(buckets[i]) = next(unitsToFill[i]));

gar G forall i in Int(0..(N - 1)). 
	!inAdjacentBucketsToEmpty(i)
   -> (next(buckets[i]) = buckets[i] + next(unitsToFill[i]));