import "DwyerPatterns.spectra"

/**
 * The first module we created in the class meeting on Nov, 7th.
 *
 * A monkey lives on a chess board and we synthesize strategies 
 * for it to move between places. 
 */
 
spec Monkey

/**
 * we declare a variable controlled by the system using keyword sys
 * 
 * the variable is an array with two fields
 * 
 * the type of each field is a bounded integer ranging from 0 to 7  
 */			
sys Int(0..7)[2] monkey;


/**
 * definitions allow shortcuts for writing new names, e.g., inBed, to express
 * that the monkey is at position (0,0), i.e., monkey[0]=0 & monkey[1]=0   
 */
define
  inBed :=	monkey[0]=0 & monkey[1]=0;		
	atTV := monkey[0]=2	& monkey[1]=2;
	inShower := 	monkey[0]=2 & monkey[1]=0;
	
/**
 * this guarantee has to hold in the initial state
 */	
gar 
  ini inBed;  

/**
 * The guarantees starting with G hold in all states. We can refer to the next 
 * value of a variable by "next"
 * 
 * note that these two guarantees only allow moving in diagonals
 */
gar
  always monkey[0]+1 = next(monkey[0]) | 
    monkey[0]-1 = next(monkey[0]); 
gar
  always monkey[1]+1 = next(monkey[1]) | 
    monkey[1]-1 = next(monkey[1]); 

/**
 * guarantees starting with GF must hold infinitely often
 */
gar
  alwEv inBed;
  
gar
  alwEv atTV;
  
  
/**
 * guarantees can instantiate patterns
 */  
gar afterTVeventuallyGoToBed: 
  S_responds_to_P_globally(inBed, atTV);
    
gar haveShowerAfterLeavingTVandGoingToBed:
  P_becomes_true_between_Q_and_R(inShower, atTV, inBed);  
  